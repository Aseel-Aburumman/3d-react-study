/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import islandScene from "../assets/3d/island.glb";
import { a } from "@react-spring/three";

const Island = ({ isRotating, setIsRotating, ...props }) => {
  const isLandRef = useRef();
  //   becuse here it try to accses the wrong thing we will name it
  //   const { nodes, materials } = useGLTF("/island.glb");
  const { nodes, materials } = useGLTF(islandScene);

  // to have accses to the 3js reder and port
  const { gl, viewport } = useThree();
  // use ref to have the last mouse position
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  // how fast it will move or continue move when u strall it it
  const dampingFactor = 0.95;

  // what happened when you press down
  const handlePointerDown = (e) => {
    e.stopProgation(); // the mouse move will onle did what it did on this function and it won't touch any other elements or functions on the  screen
    e.preventDefualt();
    setIsRotating(true);

    // need to know if it on a phone , or mouse web  ....etc
    const clientX = e.toutches ? e.toutches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  // what happened when you press up(released the mouse )
  const handlePointerUp = (e) => {
    e.stopProgation();
    e.preventDefualt();
    setIsRotating(false);

    const clientX = e.toutches ? e.toutches[0].clientX : e.clientX;
    const delta = clientX - lastX.current / viewport.width;
    // y is top and bottom
    // Math.PI => BECUASE WE WORK WITH A CIRCLE HERE
    // 0.01 is time factor
    isLandRef.current.rotation.y += delta * 0.01 * Math.PI;
    lastX.current = clientX;
    rotationSpeed.current = delta * 0.01 * Math.PI;
  };

  const handlePointerMove = (e) => {
    e.stopProgation();
    e.preventDefualt();

    if (isRotating) {
      handlePointerUp(e);
    }
  };

  useEffect(() => {
    document.addEventListener("pointerdown", handlePointerDown);
    document.addEventListener("pointerup", handlePointerUp);
    document.addEventListener("pointermove", handlePointerMove);

    return () => {
      document.removeEventListener("pointerdown", handlePointerDown);
      document.removeEventListener("pointerup", handlePointerUp);
      document.removeEventListener("pointermove", handlePointerMove);
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);

  return (
    <a.group
      {...props}
      ref={isLandRef}
      // dispose={null}
    >
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        //castShadow
        //receiveShadow
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
};

useGLTF.preload("/island.glb");
export default Island;
